package api

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/google/uuid"

	"{{.ModulePath}}/internal/domain/user"
)

func (h *Handlers) CreateUser(w http.ResponseWriter, r *http.Request) {
	var req user.CreateUserRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.writeError(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	userEntity, err := h.UserService.Create(r.Context(), req)
	if err != nil {
		switch err {
		case user.ErrEmailExists:
			h.writeError(w, "Email already exists", http.StatusConflict)
		case user.ErrUsernameExists:
			h.writeError(w, "Username already exists", http.StatusConflict)
		default:
			h.writeError(w, "Failed to create user", http.StatusInternalServerError)
		}
		return
	}

	h.writeJSON(w, userEntity, http.StatusCreated)
}

func (h *Handlers) GetUser(w http.ResponseWriter, r *http.Request) {
	idStr := r.PathValue("id")
	id, err := uuid.Parse(idStr)
	if err != nil {
		h.writeError(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	userEntity, err := h.UserService.GetByID(r.Context(), id)
	if err != nil {
		if err == user.ErrUserNotFound {
			h.writeError(w, "User not found", http.StatusNotFound)
			return
		}
		h.writeError(w, "Failed to get user", http.StatusInternalServerError)
		return
	}

	h.writeJSON(w, userEntity, http.StatusOK)
}

func (h *Handlers) UpdateUser(w http.ResponseWriter, r *http.Request) {
	idStr := r.PathValue("id")
	id, err := uuid.Parse(idStr)
	if err != nil {
		h.writeError(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	var req user.UpdateUserRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		h.writeError(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	userEntity, err := h.UserService.Update(r.Context(), id, req)
	if err != nil {
		switch err {
		case user.ErrUserNotFound:
			h.writeError(w, "User not found", http.StatusNotFound)
		case user.ErrEmailExists:
			h.writeError(w, "Email already exists", http.StatusConflict)
		case user.ErrUsernameExists:
			h.writeError(w, "Username already exists", http.StatusConflict)
		default:
			h.writeError(w, "Failed to update user", http.StatusInternalServerError)
		}
		return
	}

	h.writeJSON(w, userEntity, http.StatusOK)
}

func (h *Handlers) DeleteUser(w http.ResponseWriter, r *http.Request) {
	idStr := r.PathValue("id")
	id, err := uuid.Parse(idStr)
	if err != nil {
		h.writeError(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	err = h.UserService.Delete(r.Context(), id)
	if err != nil {
		if err == user.ErrUserNotFound {
			h.writeError(w, "User not found", http.StatusNotFound)
			return
		}
		h.writeError(w, "Failed to delete user", http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusNoContent)
}

func (h *Handlers) ListUsers(w http.ResponseWriter, r *http.Request) {
	limitStr := r.URL.Query().Get("limit")
	offsetStr := r.URL.Query().Get("offset")

	limit := 10
	offset := 0

	if limitStr != "" {
		if l, err := strconv.Atoi(limitStr); err == nil && l > 0 {
			limit = l
		}
	}

	if offsetStr != "" {
		if o, err := strconv.Atoi(offsetStr); err == nil && o >= 0 {
			offset = o
		}
	}

	users, err := h.UserService.List(r.Context(), limit, offset)
	if err != nil {
		h.writeError(w, "Failed to list users", http.StatusInternalServerError)
		return
	}

	h.writeJSON(w, users, http.StatusOK)
}
