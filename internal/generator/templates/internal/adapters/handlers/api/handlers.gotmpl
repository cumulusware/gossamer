package api

import (
	"encoding/json"
	"net/http"

	"{{.ModulePath}}/internal/domain/auth"
	"{{.ModulePath}}/internal/domain/user"
)

type Handlers struct {
	UserService *user.Service
	AuthService *auth.Service
}

type ErrorResponse struct {
	Error string `json:"error"`
}

func NewHandlers(userService *user.Service, authService *auth.Service) *Handlers {
	return &Handlers{
		UserService: userService,
		AuthService: authService,
	}
}

func (h *Handlers) writeJSON(w http.ResponseWriter, data interface{}, status int) {
	w.WriteHeader(status)
	if err := json.NewEncoder(w).Encode(data); err != nil {
		http.Error(w, "Failed to encode response", http.StatusInternalServerError)
	}
}

func (h *Handlers) writeError(w http.ResponseWriter, message string, status int) {
	w.WriteHeader(status)
	json.NewEncoder(w).Encode(ErrorResponse{Error: message})
}
