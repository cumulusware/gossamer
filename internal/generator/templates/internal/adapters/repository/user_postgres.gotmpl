package repository

import (
	"context"
	"errors"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"

	"{{.ModulePath}}/internal/domain/user"
	"{{.ModulePath}}/internal/infrastructure/database"
)

type UserPostgres struct {
	db *database.DB
}

func NewUserPostgres(db *database.DB) *UserPostgres {
	return &UserPostgres{db: db}
}

func (r *UserPostgres) Create(ctx context.Context, u *user.User) error {
	query := `
		INSERT INTO users (id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at)
		VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)`

	_, err := r.db.Pool.Exec(ctx, query,
		u.ID, u.Email, u.Username, u.PasswordHash, u.FirstName, u.LastName, u.IsActive, u.CreatedAt, u.UpdatedAt)

	return err
}

func (r *UserPostgres) GetByID(ctx context.Context, id uuid.UUID) (*user.User, error) {
	query := `
		SELECT id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at
		FROM users WHERE id = $1`

	u := &user.User{}
	err := r.db.Pool.QueryRow(ctx, query, id).Scan(
		&u.ID, &u.Email, &u.Username, &u.PasswordHash, &u.FirstName, &u.LastName, &u.IsActive, &u.CreatedAt, &u.UpdatedAt)

	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return nil, user.ErrUserNotFound
		}
		return nil, err
	}

	return u, nil
}

func (r *UserPostgres) GetByEmail(ctx context.Context, email string) (*user.User, error) {
	query := `
		SELECT id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at
		FROM users WHERE email = $1`

	u := &user.User{}
	err := r.db.Pool.QueryRow(ctx, query, email).Scan(
		&u.ID, &u.Email, &u.Username, &u.PasswordHash, &u.FirstName, &u.LastName, &u.IsActive, &u.CreatedAt, &u.UpdatedAt)

	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return nil, user.ErrUserNotFound
		}
		return nil, err
	}

	return u, nil
}

func (r *UserPostgres) GetByUsername(ctx context.Context, username string) (*user.User, error) {
	query := `
		SELECT id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at
		FROM users WHERE username = $1`

	u := &user.User{}
	err := r.db.Pool.QueryRow(ctx, query, username).Scan(
		&u.ID, &u.Email, &u.Username, &u.PasswordHash, &u.FirstName, &u.LastName, &u.IsActive, &u.CreatedAt, &u.UpdatedAt)

	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return nil, user.ErrUserNotFound
		}
		return nil, err
	}

	return u, nil
}

func (r *UserPostgres) Update(ctx context.Context, u *user.User) error {
	query := `
		UPDATE users 
		SET email = $2, username = $3, first_name = $4, last_name = $5, updated_at = $6
		WHERE id = $1`

	_, err := r.db.Pool.Exec(ctx, query,
		u.ID, u.Email, u.Username, u.FirstName, u.LastName, u.UpdatedAt)

	return err
}

func (r *UserPostgres) Delete(ctx context.Context, id uuid.UUID) error {
	query := `DELETE FROM users WHERE id = $1`
	_, err := r.db.Pool.Exec(ctx, query, id)
	return err
}

func (r *UserPostgres) List(ctx context.Context, limit, offset int) ([]*user.User, error) {
	query := `
		SELECT id, email, username, password_hash, first_name, last_name, is_active, created_at, updated_at
		FROM users ORDER BY created_at DESC LIMIT $1 OFFSET $2`

	rows, err := r.db.Pool.Query(ctx, query, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var users []*user.User
	for rows.Next() {
		u := &user.User{}
		err := rows.Scan(&u.ID, &u.Email, &u.Username, &u.PasswordHash,
			&u.FirstName, &u.LastName, &u.IsActive, &u.CreatedAt, &u.UpdatedAt)
		if err != nil {
			return nil, err
		}
		users = append(users, u)
	}

	return users, rows.Err()
}
