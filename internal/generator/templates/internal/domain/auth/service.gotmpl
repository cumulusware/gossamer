package auth

import (
	"context"
	"crypto/rand"
	"encoding/hex"
	"errors"
	"fmt"
	"time"

	"github.com/google/uuid"
	"golang.org/x/crypto/bcrypt"

	"{{.ModulePath}}/internal/domain/user"
)

var (
	ErrInvalidSession = errors.New("invalid session")
	ErrSessionExpired = errors.New("session expired")
)

type SessionRepository interface {
	Create(ctx context.Context, session *Session) error
	GetByToken(ctx context.Context, token string) (*Session, error)
	Delete(ctx context.Context, token string) error
	DeleteExpired(ctx context.Context) error
	DeleteByUserID(ctx context.Context, userID uuid.UUID) error
}

type Service struct {
	sessionRepo SessionRepository
	userRepo    user.Repository
	secret      string
}

func NewService(sessionRepo SessionRepository, userRepo user.Repository, secret string) *Service {
	return &Service{
		sessionRepo: sessionRepo,
		userRepo:    userRepo,
		secret:      secret,
	}
}

func (s *Service) Login(ctx context.Context, req LoginRequest) (*Session, *user.User, error) {
	// Authenticate user using the user repository
	userEntity, err := s.userRepo.GetByEmail(ctx, req.Email)
	if err != nil {
		return nil, nil, user.ErrInvalidCredentials
	}

	// Verify password using bcrypt
	if err := bcrypt.CompareHashAndPassword([]byte(userEntity.PasswordHash), []byte(req.Password)); err != nil {
		return nil, nil, user.ErrInvalidCredentials
	}

	if !userEntity.IsActive {
		return nil, nil, user.ErrInvalidCredentials
	}

	// Create session
	token, err := s.generateToken()
	if err != nil {
		return nil, nil, fmt.Errorf("failed to generate token: %w", err)
	}

	session := &Session{
		ID:        uuid.New(),
		UserID:    userEntity.ID,
		Token:     token,
		ExpiresAt: time.Now().Add(24 * time.Hour), // 24 hours
		CreatedAt: time.Now(),
	}

	if err := s.sessionRepo.Create(ctx, session); err != nil {
		return nil, nil, fmt.Errorf("failed to create session: %w", err)
	}

	return session, userEntity, nil
}

func (s *Service) Logout(ctx context.Context, token string) error {
	return s.sessionRepo.Delete(ctx, token)
}

func (s *Service) ValidateSession(ctx context.Context, token string) (*user.User, error) {
	session, err := s.sessionRepo.GetByToken(ctx, token)
	if err != nil {
		return nil, ErrInvalidSession
	}

	if time.Now().After(session.ExpiresAt) {
		// Delete expired session
		_ = s.sessionRepo.Delete(ctx, token)
		return nil, ErrSessionExpired
	}

	userEntity, err := s.userRepo.GetByID(ctx, session.UserID)
	if err != nil {
		return nil, ErrInvalidSession
	}

	if !userEntity.IsActive {
		return nil, ErrInvalidSession
	}

	return userEntity, nil
}

func (s *Service) generateToken() (string, error) {
	bytes := make([]byte, 32)
	if _, err := rand.Read(bytes); err != nil {
		return "", err
	}
	return hex.EncodeToString(bytes), nil
}

func (s *Service) CleanupExpiredSessions(ctx context.Context) error {
	return s.sessionRepo.DeleteExpired(ctx)
}
